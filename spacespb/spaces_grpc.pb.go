// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: allprotos/spaces.proto

package spacespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpacesServiceClient is the client API for SpacesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpacesServiceClient interface {
	CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*CreateSpaceResponse, error)
	UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*UpdateSpaceResponse, error)
	DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*DeleteSpaceResponse, error)
	ListSpaces(ctx context.Context, in *ListSpacesRequest, opts ...grpc.CallOption) (*ListSpacesResponse, error)
	GetSpaceDetails(ctx context.Context, in *GetSpaceDetailsRequest, opts ...grpc.CallOption) (*GetSpaceDetailsResponse, error)
	GetSpaceIDBySpaceName(ctx context.Context, in *GetSpaceIDBySpaceNameRequest, opts ...grpc.CallOption) (*GetSpaceIDBySpaceNameResponse, error)
	UploadSpacePhoto(ctx context.Context, in *UploadSpacePhotoRequest, opts ...grpc.CallOption) (*UploadSpacePhotoResponse, error)
	CheckSpaceAccess(ctx context.Context, in *CheckSpaceAccessRequest, opts ...grpc.CallOption) (*CheckSpaceAccessResponse, error)
	GetUserSpaceRole(ctx context.Context, in *GetUserSpaceRoleRequest, opts ...grpc.CallOption) (*GetUserSpaceRoleResponse, error)
	ChangeUserSpaceRole(ctx context.Context, in *ChangeUserSpaceRoleRequest, opts ...grpc.CallOption) (*ChangeUserSpaceRoleResponse, error)
	ApplyForSpaceAccess(ctx context.Context, in *ApplyForSpaceAccessRequest, opts ...grpc.CallOption) (*ApplyForSpaceAccessResponse, error)
	AcceptSpaceAccessApplication(ctx context.Context, in *AcceptSpaceAccessApplicationRequest, opts ...grpc.CallOption) (*AcceptSpaceAccessApplicationResponse, error)
	DenySpaceAccessApplication(ctx context.Context, in *DenySpaceAccessApplicationRequest, opts ...grpc.CallOption) (*DenySpaceAccessApplicationResponse, error)
	WithdrawSpaceAccessApplication(ctx context.Context, in *WithdrawSpaceAccessApplicationRequest, opts ...grpc.CallOption) (*WithdrawSpaceAccessApplicationResponse, error)
	GetUserApplications(ctx context.Context, in *GetUserApplicationsRequest, opts ...grpc.CallOption) (*GetUserApplicationsResponse, error)
	InviteMemberToSpace(ctx context.Context, in *InviteMemberToSpaceRequest, opts ...grpc.CallOption) (*InviteMemberToSpaceResponse, error)
	WithdrawInvitationToSpace(ctx context.Context, in *WithdrawInvitationToSpaceRequest, opts ...grpc.CallOption) (*WithdrawInvitationToSpaceResponse, error)
	GetUserInvitations(ctx context.Context, in *GetUserInvitationsRequest, opts ...grpc.CallOption) (*GetUserInvitationsResponse, error)
	AcceptSpaceInvitation(ctx context.Context, in *AcceptSpaceInvitationRequest, opts ...grpc.CallOption) (*AcceptSpaceInvitationResponse, error)
	DenySpaceInvitation(ctx context.Context, in *DenySpaceInvitationRequest, opts ...grpc.CallOption) (*DenySpaceInvitationResponse, error)
	DeleteMemberFromSpace(ctx context.Context, in *DeleteMemberFromSpaceRequest, opts ...grpc.CallOption) (*DeleteMemberFromSpaceResponse, error)
	UpdateChatForbiddenWords(ctx context.Context, in *UpdateChatForbiddenWordsRequest, opts ...grpc.CallOption) (*UpdateChatForbiddenWordsResponse, error)
	ChangeSpaceOwner(ctx context.Context, in *ChangeSpaceOwnerRequest, opts ...grpc.CallOption) (*ChangeSpaceOwnerResponse, error)
	RegenerateAPIKey(ctx context.Context, in *RegenerateAPIKeyRequest, opts ...grpc.CallOption) (*RegenerateAPIKeyResponse, error)
	ValidateAPIKey(ctx context.Context, in *ValidateAPIKeyRequest, opts ...grpc.CallOption) (*ValidateAPIKeyResponse, error)
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
}

type spacesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpacesServiceClient(cc grpc.ClientConnInterface) SpacesServiceClient {
	return &spacesServiceClient{cc}
}

func (c *spacesServiceClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*CreateSpaceResponse, error) {
	out := new(CreateSpaceResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/CreateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*UpdateSpaceResponse, error) {
	out := new(UpdateSpaceResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/UpdateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*DeleteSpaceResponse, error) {
	out := new(DeleteSpaceResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/DeleteSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) ListSpaces(ctx context.Context, in *ListSpacesRequest, opts ...grpc.CallOption) (*ListSpacesResponse, error) {
	out := new(ListSpacesResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/ListSpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) GetSpaceDetails(ctx context.Context, in *GetSpaceDetailsRequest, opts ...grpc.CallOption) (*GetSpaceDetailsResponse, error) {
	out := new(GetSpaceDetailsResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/GetSpaceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) GetSpaceIDBySpaceName(ctx context.Context, in *GetSpaceIDBySpaceNameRequest, opts ...grpc.CallOption) (*GetSpaceIDBySpaceNameResponse, error) {
	out := new(GetSpaceIDBySpaceNameResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/GetSpaceIDBySpaceName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) UploadSpacePhoto(ctx context.Context, in *UploadSpacePhotoRequest, opts ...grpc.CallOption) (*UploadSpacePhotoResponse, error) {
	out := new(UploadSpacePhotoResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/UploadSpacePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) CheckSpaceAccess(ctx context.Context, in *CheckSpaceAccessRequest, opts ...grpc.CallOption) (*CheckSpaceAccessResponse, error) {
	out := new(CheckSpaceAccessResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/CheckSpaceAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) GetUserSpaceRole(ctx context.Context, in *GetUserSpaceRoleRequest, opts ...grpc.CallOption) (*GetUserSpaceRoleResponse, error) {
	out := new(GetUserSpaceRoleResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/GetUserSpaceRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) ChangeUserSpaceRole(ctx context.Context, in *ChangeUserSpaceRoleRequest, opts ...grpc.CallOption) (*ChangeUserSpaceRoleResponse, error) {
	out := new(ChangeUserSpaceRoleResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/ChangeUserSpaceRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) ApplyForSpaceAccess(ctx context.Context, in *ApplyForSpaceAccessRequest, opts ...grpc.CallOption) (*ApplyForSpaceAccessResponse, error) {
	out := new(ApplyForSpaceAccessResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/ApplyForSpaceAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) AcceptSpaceAccessApplication(ctx context.Context, in *AcceptSpaceAccessApplicationRequest, opts ...grpc.CallOption) (*AcceptSpaceAccessApplicationResponse, error) {
	out := new(AcceptSpaceAccessApplicationResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/AcceptSpaceAccessApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) DenySpaceAccessApplication(ctx context.Context, in *DenySpaceAccessApplicationRequest, opts ...grpc.CallOption) (*DenySpaceAccessApplicationResponse, error) {
	out := new(DenySpaceAccessApplicationResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/DenySpaceAccessApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) WithdrawSpaceAccessApplication(ctx context.Context, in *WithdrawSpaceAccessApplicationRequest, opts ...grpc.CallOption) (*WithdrawSpaceAccessApplicationResponse, error) {
	out := new(WithdrawSpaceAccessApplicationResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/WithdrawSpaceAccessApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) GetUserApplications(ctx context.Context, in *GetUserApplicationsRequest, opts ...grpc.CallOption) (*GetUserApplicationsResponse, error) {
	out := new(GetUserApplicationsResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/GetUserApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) InviteMemberToSpace(ctx context.Context, in *InviteMemberToSpaceRequest, opts ...grpc.CallOption) (*InviteMemberToSpaceResponse, error) {
	out := new(InviteMemberToSpaceResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/InviteMemberToSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) WithdrawInvitationToSpace(ctx context.Context, in *WithdrawInvitationToSpaceRequest, opts ...grpc.CallOption) (*WithdrawInvitationToSpaceResponse, error) {
	out := new(WithdrawInvitationToSpaceResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/WithdrawInvitationToSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) GetUserInvitations(ctx context.Context, in *GetUserInvitationsRequest, opts ...grpc.CallOption) (*GetUserInvitationsResponse, error) {
	out := new(GetUserInvitationsResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/GetUserInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) AcceptSpaceInvitation(ctx context.Context, in *AcceptSpaceInvitationRequest, opts ...grpc.CallOption) (*AcceptSpaceInvitationResponse, error) {
	out := new(AcceptSpaceInvitationResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/AcceptSpaceInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) DenySpaceInvitation(ctx context.Context, in *DenySpaceInvitationRequest, opts ...grpc.CallOption) (*DenySpaceInvitationResponse, error) {
	out := new(DenySpaceInvitationResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/DenySpaceInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) DeleteMemberFromSpace(ctx context.Context, in *DeleteMemberFromSpaceRequest, opts ...grpc.CallOption) (*DeleteMemberFromSpaceResponse, error) {
	out := new(DeleteMemberFromSpaceResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/DeleteMemberFromSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) UpdateChatForbiddenWords(ctx context.Context, in *UpdateChatForbiddenWordsRequest, opts ...grpc.CallOption) (*UpdateChatForbiddenWordsResponse, error) {
	out := new(UpdateChatForbiddenWordsResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/UpdateChatForbiddenWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) ChangeSpaceOwner(ctx context.Context, in *ChangeSpaceOwnerRequest, opts ...grpc.CallOption) (*ChangeSpaceOwnerResponse, error) {
	out := new(ChangeSpaceOwnerResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/ChangeSpaceOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) RegenerateAPIKey(ctx context.Context, in *RegenerateAPIKeyRequest, opts ...grpc.CallOption) (*RegenerateAPIKeyResponse, error) {
	out := new(RegenerateAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/RegenerateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) ValidateAPIKey(ctx context.Context, in *ValidateAPIKeyRequest, opts ...grpc.CallOption) (*ValidateAPIKeyResponse, error) {
	out := new(ValidateAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/ValidateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, "/spaces.SpacesService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpacesServiceServer is the server API for SpacesService service.
// All implementations must embed UnimplementedSpacesServiceServer
// for forward compatibility
type SpacesServiceServer interface {
	CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceResponse, error)
	UpdateSpace(context.Context, *UpdateSpaceRequest) (*UpdateSpaceResponse, error)
	DeleteSpace(context.Context, *DeleteSpaceRequest) (*DeleteSpaceResponse, error)
	ListSpaces(context.Context, *ListSpacesRequest) (*ListSpacesResponse, error)
	GetSpaceDetails(context.Context, *GetSpaceDetailsRequest) (*GetSpaceDetailsResponse, error)
	GetSpaceIDBySpaceName(context.Context, *GetSpaceIDBySpaceNameRequest) (*GetSpaceIDBySpaceNameResponse, error)
	UploadSpacePhoto(context.Context, *UploadSpacePhotoRequest) (*UploadSpacePhotoResponse, error)
	CheckSpaceAccess(context.Context, *CheckSpaceAccessRequest) (*CheckSpaceAccessResponse, error)
	GetUserSpaceRole(context.Context, *GetUserSpaceRoleRequest) (*GetUserSpaceRoleResponse, error)
	ChangeUserSpaceRole(context.Context, *ChangeUserSpaceRoleRequest) (*ChangeUserSpaceRoleResponse, error)
	ApplyForSpaceAccess(context.Context, *ApplyForSpaceAccessRequest) (*ApplyForSpaceAccessResponse, error)
	AcceptSpaceAccessApplication(context.Context, *AcceptSpaceAccessApplicationRequest) (*AcceptSpaceAccessApplicationResponse, error)
	DenySpaceAccessApplication(context.Context, *DenySpaceAccessApplicationRequest) (*DenySpaceAccessApplicationResponse, error)
	WithdrawSpaceAccessApplication(context.Context, *WithdrawSpaceAccessApplicationRequest) (*WithdrawSpaceAccessApplicationResponse, error)
	GetUserApplications(context.Context, *GetUserApplicationsRequest) (*GetUserApplicationsResponse, error)
	InviteMemberToSpace(context.Context, *InviteMemberToSpaceRequest) (*InviteMemberToSpaceResponse, error)
	WithdrawInvitationToSpace(context.Context, *WithdrawInvitationToSpaceRequest) (*WithdrawInvitationToSpaceResponse, error)
	GetUserInvitations(context.Context, *GetUserInvitationsRequest) (*GetUserInvitationsResponse, error)
	AcceptSpaceInvitation(context.Context, *AcceptSpaceInvitationRequest) (*AcceptSpaceInvitationResponse, error)
	DenySpaceInvitation(context.Context, *DenySpaceInvitationRequest) (*DenySpaceInvitationResponse, error)
	DeleteMemberFromSpace(context.Context, *DeleteMemberFromSpaceRequest) (*DeleteMemberFromSpaceResponse, error)
	UpdateChatForbiddenWords(context.Context, *UpdateChatForbiddenWordsRequest) (*UpdateChatForbiddenWordsResponse, error)
	ChangeSpaceOwner(context.Context, *ChangeSpaceOwnerRequest) (*ChangeSpaceOwnerResponse, error)
	RegenerateAPIKey(context.Context, *RegenerateAPIKeyRequest) (*RegenerateAPIKeyResponse, error)
	ValidateAPIKey(context.Context, *ValidateAPIKeyRequest) (*ValidateAPIKeyResponse, error)
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	mustEmbedUnimplementedSpacesServiceServer()
}

// UnimplementedSpacesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpacesServiceServer struct {
}

func (UnimplementedSpacesServiceServer) CreateSpace(context.Context, *CreateSpaceRequest) (*CreateSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedSpacesServiceServer) UpdateSpace(context.Context, *UpdateSpaceRequest) (*UpdateSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpace not implemented")
}
func (UnimplementedSpacesServiceServer) DeleteSpace(context.Context, *DeleteSpaceRequest) (*DeleteSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedSpacesServiceServer) ListSpaces(context.Context, *ListSpacesRequest) (*ListSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaces not implemented")
}
func (UnimplementedSpacesServiceServer) GetSpaceDetails(context.Context, *GetSpaceDetailsRequest) (*GetSpaceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceDetails not implemented")
}
func (UnimplementedSpacesServiceServer) GetSpaceIDBySpaceName(context.Context, *GetSpaceIDBySpaceNameRequest) (*GetSpaceIDBySpaceNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceIDBySpaceName not implemented")
}
func (UnimplementedSpacesServiceServer) UploadSpacePhoto(context.Context, *UploadSpacePhotoRequest) (*UploadSpacePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSpacePhoto not implemented")
}
func (UnimplementedSpacesServiceServer) CheckSpaceAccess(context.Context, *CheckSpaceAccessRequest) (*CheckSpaceAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSpaceAccess not implemented")
}
func (UnimplementedSpacesServiceServer) GetUserSpaceRole(context.Context, *GetUserSpaceRoleRequest) (*GetUserSpaceRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSpaceRole not implemented")
}
func (UnimplementedSpacesServiceServer) ChangeUserSpaceRole(context.Context, *ChangeUserSpaceRoleRequest) (*ChangeUserSpaceRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserSpaceRole not implemented")
}
func (UnimplementedSpacesServiceServer) ApplyForSpaceAccess(context.Context, *ApplyForSpaceAccessRequest) (*ApplyForSpaceAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyForSpaceAccess not implemented")
}
func (UnimplementedSpacesServiceServer) AcceptSpaceAccessApplication(context.Context, *AcceptSpaceAccessApplicationRequest) (*AcceptSpaceAccessApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptSpaceAccessApplication not implemented")
}
func (UnimplementedSpacesServiceServer) DenySpaceAccessApplication(context.Context, *DenySpaceAccessApplicationRequest) (*DenySpaceAccessApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenySpaceAccessApplication not implemented")
}
func (UnimplementedSpacesServiceServer) WithdrawSpaceAccessApplication(context.Context, *WithdrawSpaceAccessApplicationRequest) (*WithdrawSpaceAccessApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawSpaceAccessApplication not implemented")
}
func (UnimplementedSpacesServiceServer) GetUserApplications(context.Context, *GetUserApplicationsRequest) (*GetUserApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserApplications not implemented")
}
func (UnimplementedSpacesServiceServer) InviteMemberToSpace(context.Context, *InviteMemberToSpaceRequest) (*InviteMemberToSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMemberToSpace not implemented")
}
func (UnimplementedSpacesServiceServer) WithdrawInvitationToSpace(context.Context, *WithdrawInvitationToSpaceRequest) (*WithdrawInvitationToSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawInvitationToSpace not implemented")
}
func (UnimplementedSpacesServiceServer) GetUserInvitations(context.Context, *GetUserInvitationsRequest) (*GetUserInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvitations not implemented")
}
func (UnimplementedSpacesServiceServer) AcceptSpaceInvitation(context.Context, *AcceptSpaceInvitationRequest) (*AcceptSpaceInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptSpaceInvitation not implemented")
}
func (UnimplementedSpacesServiceServer) DenySpaceInvitation(context.Context, *DenySpaceInvitationRequest) (*DenySpaceInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenySpaceInvitation not implemented")
}
func (UnimplementedSpacesServiceServer) DeleteMemberFromSpace(context.Context, *DeleteMemberFromSpaceRequest) (*DeleteMemberFromSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberFromSpace not implemented")
}
func (UnimplementedSpacesServiceServer) UpdateChatForbiddenWords(context.Context, *UpdateChatForbiddenWordsRequest) (*UpdateChatForbiddenWordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatForbiddenWords not implemented")
}
func (UnimplementedSpacesServiceServer) ChangeSpaceOwner(context.Context, *ChangeSpaceOwnerRequest) (*ChangeSpaceOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSpaceOwner not implemented")
}
func (UnimplementedSpacesServiceServer) RegenerateAPIKey(context.Context, *RegenerateAPIKeyRequest) (*RegenerateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateAPIKey not implemented")
}
func (UnimplementedSpacesServiceServer) ValidateAPIKey(context.Context, *ValidateAPIKeyRequest) (*ValidateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAPIKey not implemented")
}
func (UnimplementedSpacesServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedSpacesServiceServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedSpacesServiceServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedSpacesServiceServer) mustEmbedUnimplementedSpacesServiceServer() {}

// UnsafeSpacesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpacesServiceServer will
// result in compilation errors.
type UnsafeSpacesServiceServer interface {
	mustEmbedUnimplementedSpacesServiceServer()
}

func RegisterSpacesServiceServer(s grpc.ServiceRegistrar, srv SpacesServiceServer) {
	s.RegisterService(&SpacesService_ServiceDesc, srv)
}

func _SpacesService_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).CreateSpace(ctx, req.(*CreateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_UpdateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).UpdateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/UpdateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).UpdateSpace(ctx, req.(*UpdateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).DeleteSpace(ctx, req.(*DeleteSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_ListSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).ListSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/ListSpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).ListSpaces(ctx, req.(*ListSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_GetSpaceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).GetSpaceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/GetSpaceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).GetSpaceDetails(ctx, req.(*GetSpaceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_GetSpaceIDBySpaceName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceIDBySpaceNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).GetSpaceIDBySpaceName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/GetSpaceIDBySpaceName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).GetSpaceIDBySpaceName(ctx, req.(*GetSpaceIDBySpaceNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_UploadSpacePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSpacePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).UploadSpacePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/UploadSpacePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).UploadSpacePhoto(ctx, req.(*UploadSpacePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_CheckSpaceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSpaceAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).CheckSpaceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/CheckSpaceAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).CheckSpaceAccess(ctx, req.(*CheckSpaceAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_GetUserSpaceRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSpaceRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).GetUserSpaceRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/GetUserSpaceRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).GetUserSpaceRole(ctx, req.(*GetUserSpaceRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_ChangeUserSpaceRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserSpaceRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).ChangeUserSpaceRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/ChangeUserSpaceRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).ChangeUserSpaceRole(ctx, req.(*ChangeUserSpaceRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_ApplyForSpaceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyForSpaceAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).ApplyForSpaceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/ApplyForSpaceAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).ApplyForSpaceAccess(ctx, req.(*ApplyForSpaceAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_AcceptSpaceAccessApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptSpaceAccessApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).AcceptSpaceAccessApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/AcceptSpaceAccessApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).AcceptSpaceAccessApplication(ctx, req.(*AcceptSpaceAccessApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_DenySpaceAccessApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenySpaceAccessApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).DenySpaceAccessApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/DenySpaceAccessApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).DenySpaceAccessApplication(ctx, req.(*DenySpaceAccessApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_WithdrawSpaceAccessApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawSpaceAccessApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).WithdrawSpaceAccessApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/WithdrawSpaceAccessApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).WithdrawSpaceAccessApplication(ctx, req.(*WithdrawSpaceAccessApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_GetUserApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).GetUserApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/GetUserApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).GetUserApplications(ctx, req.(*GetUserApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_InviteMemberToSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberToSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).InviteMemberToSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/InviteMemberToSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).InviteMemberToSpace(ctx, req.(*InviteMemberToSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_WithdrawInvitationToSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawInvitationToSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).WithdrawInvitationToSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/WithdrawInvitationToSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).WithdrawInvitationToSpace(ctx, req.(*WithdrawInvitationToSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_GetUserInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).GetUserInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/GetUserInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).GetUserInvitations(ctx, req.(*GetUserInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_AcceptSpaceInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptSpaceInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).AcceptSpaceInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/AcceptSpaceInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).AcceptSpaceInvitation(ctx, req.(*AcceptSpaceInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_DenySpaceInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenySpaceInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).DenySpaceInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/DenySpaceInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).DenySpaceInvitation(ctx, req.(*DenySpaceInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_DeleteMemberFromSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberFromSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).DeleteMemberFromSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/DeleteMemberFromSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).DeleteMemberFromSpace(ctx, req.(*DeleteMemberFromSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_UpdateChatForbiddenWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatForbiddenWordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).UpdateChatForbiddenWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/UpdateChatForbiddenWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).UpdateChatForbiddenWords(ctx, req.(*UpdateChatForbiddenWordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_ChangeSpaceOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSpaceOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).ChangeSpaceOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/ChangeSpaceOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).ChangeSpaceOwner(ctx, req.(*ChangeSpaceOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_RegenerateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).RegenerateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/RegenerateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).RegenerateAPIKey(ctx, req.(*RegenerateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_ValidateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).ValidateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/ValidateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).ValidateAPIKey(ctx, req.(*ValidateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spaces.SpacesService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpacesService_ServiceDesc is the grpc.ServiceDesc for SpacesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpacesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaces.SpacesService",
	HandlerType: (*SpacesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _SpacesService_CreateSpace_Handler,
		},
		{
			MethodName: "UpdateSpace",
			Handler:    _SpacesService_UpdateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _SpacesService_DeleteSpace_Handler,
		},
		{
			MethodName: "ListSpaces",
			Handler:    _SpacesService_ListSpaces_Handler,
		},
		{
			MethodName: "GetSpaceDetails",
			Handler:    _SpacesService_GetSpaceDetails_Handler,
		},
		{
			MethodName: "GetSpaceIDBySpaceName",
			Handler:    _SpacesService_GetSpaceIDBySpaceName_Handler,
		},
		{
			MethodName: "UploadSpacePhoto",
			Handler:    _SpacesService_UploadSpacePhoto_Handler,
		},
		{
			MethodName: "CheckSpaceAccess",
			Handler:    _SpacesService_CheckSpaceAccess_Handler,
		},
		{
			MethodName: "GetUserSpaceRole",
			Handler:    _SpacesService_GetUserSpaceRole_Handler,
		},
		{
			MethodName: "ChangeUserSpaceRole",
			Handler:    _SpacesService_ChangeUserSpaceRole_Handler,
		},
		{
			MethodName: "ApplyForSpaceAccess",
			Handler:    _SpacesService_ApplyForSpaceAccess_Handler,
		},
		{
			MethodName: "AcceptSpaceAccessApplication",
			Handler:    _SpacesService_AcceptSpaceAccessApplication_Handler,
		},
		{
			MethodName: "DenySpaceAccessApplication",
			Handler:    _SpacesService_DenySpaceAccessApplication_Handler,
		},
		{
			MethodName: "WithdrawSpaceAccessApplication",
			Handler:    _SpacesService_WithdrawSpaceAccessApplication_Handler,
		},
		{
			MethodName: "GetUserApplications",
			Handler:    _SpacesService_GetUserApplications_Handler,
		},
		{
			MethodName: "InviteMemberToSpace",
			Handler:    _SpacesService_InviteMemberToSpace_Handler,
		},
		{
			MethodName: "WithdrawInvitationToSpace",
			Handler:    _SpacesService_WithdrawInvitationToSpace_Handler,
		},
		{
			MethodName: "GetUserInvitations",
			Handler:    _SpacesService_GetUserInvitations_Handler,
		},
		{
			MethodName: "AcceptSpaceInvitation",
			Handler:    _SpacesService_AcceptSpaceInvitation_Handler,
		},
		{
			MethodName: "DenySpaceInvitation",
			Handler:    _SpacesService_DenySpaceInvitation_Handler,
		},
		{
			MethodName: "DeleteMemberFromSpace",
			Handler:    _SpacesService_DeleteMemberFromSpace_Handler,
		},
		{
			MethodName: "UpdateChatForbiddenWords",
			Handler:    _SpacesService_UpdateChatForbiddenWords_Handler,
		},
		{
			MethodName: "ChangeSpaceOwner",
			Handler:    _SpacesService_ChangeSpaceOwner_Handler,
		},
		{
			MethodName: "RegenerateAPIKey",
			Handler:    _SpacesService_RegenerateAPIKey_Handler,
		},
		{
			MethodName: "ValidateAPIKey",
			Handler:    _SpacesService_ValidateAPIKey_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _SpacesService_CreateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _SpacesService_DeleteCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _SpacesService_ListCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allprotos/spaces.proto",
}
