// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: allprotos/shorts.proto

package shortspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortsServiceClient is the client API for ShortsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortsServiceClient interface {
	CreateShort(ctx context.Context, in *CreateShortRequest, opts ...grpc.CallOption) (*CreateShortResponse, error)
	DeleteShort(ctx context.Context, in *DeleteShortRequest, opts ...grpc.CallOption) (*DeleteShortResponse, error)
	UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error)
	DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error)
	UpdateVideoConfig(ctx context.Context, in *UpdateVideoConfigRequest, opts ...grpc.CallOption) (*UpdateVideoConfigResponse, error)
	CombineVideos(ctx context.Context, in *CombineVideosRequest, opts ...grpc.CallOption) (*CombineVideosResponse, error)
	UpdateShort(ctx context.Context, in *UpdateShortRequest, opts ...grpc.CallOption) (*UpdateShortResponse, error)
	GetShort(ctx context.Context, in *GetShortRequest, opts ...grpc.CallOption) (*GetShortResponse, error)
	ListShorts(ctx context.Context, in *ListShortsRequest, opts ...grpc.CallOption) (*ListShortsResponse, error)
	UpdateShortInteractions(ctx context.Context, in *UpdateShortInteractionsRequest, opts ...grpc.CallOption) (*UpdateShortInteractionsResponse, error)
	AddHotspotInteraction(ctx context.Context, in *CreateHotspotInteractionRequest, opts ...grpc.CallOption) (*CreateHotspotInteractionResponse, error)
	UpdateHotspotInteraction(ctx context.Context, in *UpdateHotspotInteractionRequest, opts ...grpc.CallOption) (*UpdateHotspotInteractionResponse, error)
	DeleteHotspotInteraction(ctx context.Context, in *DeleteHotspotInteractionRequest, opts ...grpc.CallOption) (*DeleteHotspotInteractionResponse, error)
	AddTextInteraction(ctx context.Context, in *CreateTextInteractionRequest, opts ...grpc.CallOption) (*CreateTextInteractionResponse, error)
	UpdateTextInteraction(ctx context.Context, in *UpdateTextInteractionRequest, opts ...grpc.CallOption) (*UpdateTextInteractionResponse, error)
	DeleteTextInteraction(ctx context.Context, in *DeleteTextInteractionRequest, opts ...grpc.CallOption) (*DeleteTextInteractionResponse, error)
	AddButtonInteraction(ctx context.Context, in *CreateButtonInteractionRequest, opts ...grpc.CallOption) (*CreateButtonInteractionResponse, error)
	UpdateButtonInteraction(ctx context.Context, in *UpdateButtonInteractionRequest, opts ...grpc.CallOption) (*UpdateButtonInteractionResponse, error)
	DeleteButtonInteraction(ctx context.Context, in *DeleteButtonInteractionRequest, opts ...grpc.CallOption) (*DeleteButtonInteractionResponse, error)
	AddProductInteraction(ctx context.Context, in *CreateProductInteractionRequest, opts ...grpc.CallOption) (*CreateProductInteractionResponse, error)
	UpdateProductInteraction(ctx context.Context, in *UpdateProductInteractionRequest, opts ...grpc.CallOption) (*UpdateProductInteractionResponse, error)
	DeleteProductInteraction(ctx context.Context, in *DeleteProductInteractionRequest, opts ...grpc.CallOption) (*DeleteProductInteractionResponse, error)
	UpdateProductsCardStyle(ctx context.Context, in *UpdateProductsCardStyleRequest, opts ...grpc.CallOption) (*UpdateProductsCardStyleResponse, error)
	ApproveShort(ctx context.Context, in *ApproveShortRequest, opts ...grpc.CallOption) (*ApproveShortResponse, error)
	RejectShort(ctx context.Context, in *RejectShortRequest, opts ...grpc.CallOption) (*RejectShortResponse, error)
	PublishShort(ctx context.Context, in *PublishShortRequest, opts ...grpc.CallOption) (*PublishShortResponse, error)
	UnpublishShort(ctx context.Context, in *UnpublishShortRequest, opts ...grpc.CallOption) (*UnpublishShortResponse, error)
	GenerateShortThumbnail(ctx context.Context, in *GenerateShortThumbnailRequest, opts ...grpc.CallOption) (*GenerateShortThumbnailResponse, error)
	UploadShortThumbnail(ctx context.Context, in *UploadShortThumbnailRequest, opts ...grpc.CallOption) (*UploadShortThumbnailResponse, error)
}

type shortsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortsServiceClient(cc grpc.ClientConnInterface) ShortsServiceClient {
	return &shortsServiceClient{cc}
}

func (c *shortsServiceClient) CreateShort(ctx context.Context, in *CreateShortRequest, opts ...grpc.CallOption) (*CreateShortResponse, error) {
	out := new(CreateShortResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/CreateShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) DeleteShort(ctx context.Context, in *DeleteShortRequest, opts ...grpc.CallOption) (*DeleteShortResponse, error) {
	out := new(DeleteShortResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/DeleteShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error) {
	out := new(UploadVideoResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UploadVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error) {
	out := new(DeleteVideoResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/DeleteVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UpdateVideoConfig(ctx context.Context, in *UpdateVideoConfigRequest, opts ...grpc.CallOption) (*UpdateVideoConfigResponse, error) {
	out := new(UpdateVideoConfigResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UpdateVideoConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) CombineVideos(ctx context.Context, in *CombineVideosRequest, opts ...grpc.CallOption) (*CombineVideosResponse, error) {
	out := new(CombineVideosResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/CombineVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UpdateShort(ctx context.Context, in *UpdateShortRequest, opts ...grpc.CallOption) (*UpdateShortResponse, error) {
	out := new(UpdateShortResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UpdateShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) GetShort(ctx context.Context, in *GetShortRequest, opts ...grpc.CallOption) (*GetShortResponse, error) {
	out := new(GetShortResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/GetShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) ListShorts(ctx context.Context, in *ListShortsRequest, opts ...grpc.CallOption) (*ListShortsResponse, error) {
	out := new(ListShortsResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/ListShorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UpdateShortInteractions(ctx context.Context, in *UpdateShortInteractionsRequest, opts ...grpc.CallOption) (*UpdateShortInteractionsResponse, error) {
	out := new(UpdateShortInteractionsResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UpdateShortInteractions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) AddHotspotInteraction(ctx context.Context, in *CreateHotspotInteractionRequest, opts ...grpc.CallOption) (*CreateHotspotInteractionResponse, error) {
	out := new(CreateHotspotInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/AddHotspotInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UpdateHotspotInteraction(ctx context.Context, in *UpdateHotspotInteractionRequest, opts ...grpc.CallOption) (*UpdateHotspotInteractionResponse, error) {
	out := new(UpdateHotspotInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UpdateHotspotInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) DeleteHotspotInteraction(ctx context.Context, in *DeleteHotspotInteractionRequest, opts ...grpc.CallOption) (*DeleteHotspotInteractionResponse, error) {
	out := new(DeleteHotspotInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/DeleteHotspotInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) AddTextInteraction(ctx context.Context, in *CreateTextInteractionRequest, opts ...grpc.CallOption) (*CreateTextInteractionResponse, error) {
	out := new(CreateTextInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/AddTextInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UpdateTextInteraction(ctx context.Context, in *UpdateTextInteractionRequest, opts ...grpc.CallOption) (*UpdateTextInteractionResponse, error) {
	out := new(UpdateTextInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UpdateTextInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) DeleteTextInteraction(ctx context.Context, in *DeleteTextInteractionRequest, opts ...grpc.CallOption) (*DeleteTextInteractionResponse, error) {
	out := new(DeleteTextInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/DeleteTextInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) AddButtonInteraction(ctx context.Context, in *CreateButtonInteractionRequest, opts ...grpc.CallOption) (*CreateButtonInteractionResponse, error) {
	out := new(CreateButtonInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/AddButtonInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UpdateButtonInteraction(ctx context.Context, in *UpdateButtonInteractionRequest, opts ...grpc.CallOption) (*UpdateButtonInteractionResponse, error) {
	out := new(UpdateButtonInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UpdateButtonInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) DeleteButtonInteraction(ctx context.Context, in *DeleteButtonInteractionRequest, opts ...grpc.CallOption) (*DeleteButtonInteractionResponse, error) {
	out := new(DeleteButtonInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/DeleteButtonInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) AddProductInteraction(ctx context.Context, in *CreateProductInteractionRequest, opts ...grpc.CallOption) (*CreateProductInteractionResponse, error) {
	out := new(CreateProductInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/AddProductInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UpdateProductInteraction(ctx context.Context, in *UpdateProductInteractionRequest, opts ...grpc.CallOption) (*UpdateProductInteractionResponse, error) {
	out := new(UpdateProductInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UpdateProductInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) DeleteProductInteraction(ctx context.Context, in *DeleteProductInteractionRequest, opts ...grpc.CallOption) (*DeleteProductInteractionResponse, error) {
	out := new(DeleteProductInteractionResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/DeleteProductInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UpdateProductsCardStyle(ctx context.Context, in *UpdateProductsCardStyleRequest, opts ...grpc.CallOption) (*UpdateProductsCardStyleResponse, error) {
	out := new(UpdateProductsCardStyleResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UpdateProductsCardStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) ApproveShort(ctx context.Context, in *ApproveShortRequest, opts ...grpc.CallOption) (*ApproveShortResponse, error) {
	out := new(ApproveShortResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/ApproveShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) RejectShort(ctx context.Context, in *RejectShortRequest, opts ...grpc.CallOption) (*RejectShortResponse, error) {
	out := new(RejectShortResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/RejectShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) PublishShort(ctx context.Context, in *PublishShortRequest, opts ...grpc.CallOption) (*PublishShortResponse, error) {
	out := new(PublishShortResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/PublishShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UnpublishShort(ctx context.Context, in *UnpublishShortRequest, opts ...grpc.CallOption) (*UnpublishShortResponse, error) {
	out := new(UnpublishShortResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UnpublishShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) GenerateShortThumbnail(ctx context.Context, in *GenerateShortThumbnailRequest, opts ...grpc.CallOption) (*GenerateShortThumbnailResponse, error) {
	out := new(GenerateShortThumbnailResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/GenerateShortThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortsServiceClient) UploadShortThumbnail(ctx context.Context, in *UploadShortThumbnailRequest, opts ...grpc.CallOption) (*UploadShortThumbnailResponse, error) {
	out := new(UploadShortThumbnailResponse)
	err := c.cc.Invoke(ctx, "/shorts.ShortsService/UploadShortThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortsServiceServer is the server API for ShortsService service.
// All implementations must embed UnimplementedShortsServiceServer
// for forward compatibility
type ShortsServiceServer interface {
	CreateShort(context.Context, *CreateShortRequest) (*CreateShortResponse, error)
	DeleteShort(context.Context, *DeleteShortRequest) (*DeleteShortResponse, error)
	UploadVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error)
	DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error)
	UpdateVideoConfig(context.Context, *UpdateVideoConfigRequest) (*UpdateVideoConfigResponse, error)
	CombineVideos(context.Context, *CombineVideosRequest) (*CombineVideosResponse, error)
	UpdateShort(context.Context, *UpdateShortRequest) (*UpdateShortResponse, error)
	GetShort(context.Context, *GetShortRequest) (*GetShortResponse, error)
	ListShorts(context.Context, *ListShortsRequest) (*ListShortsResponse, error)
	UpdateShortInteractions(context.Context, *UpdateShortInteractionsRequest) (*UpdateShortInteractionsResponse, error)
	AddHotspotInteraction(context.Context, *CreateHotspotInteractionRequest) (*CreateHotspotInteractionResponse, error)
	UpdateHotspotInteraction(context.Context, *UpdateHotspotInteractionRequest) (*UpdateHotspotInteractionResponse, error)
	DeleteHotspotInteraction(context.Context, *DeleteHotspotInteractionRequest) (*DeleteHotspotInteractionResponse, error)
	AddTextInteraction(context.Context, *CreateTextInteractionRequest) (*CreateTextInteractionResponse, error)
	UpdateTextInteraction(context.Context, *UpdateTextInteractionRequest) (*UpdateTextInteractionResponse, error)
	DeleteTextInteraction(context.Context, *DeleteTextInteractionRequest) (*DeleteTextInteractionResponse, error)
	AddButtonInteraction(context.Context, *CreateButtonInteractionRequest) (*CreateButtonInteractionResponse, error)
	UpdateButtonInteraction(context.Context, *UpdateButtonInteractionRequest) (*UpdateButtonInteractionResponse, error)
	DeleteButtonInteraction(context.Context, *DeleteButtonInteractionRequest) (*DeleteButtonInteractionResponse, error)
	AddProductInteraction(context.Context, *CreateProductInteractionRequest) (*CreateProductInteractionResponse, error)
	UpdateProductInteraction(context.Context, *UpdateProductInteractionRequest) (*UpdateProductInteractionResponse, error)
	DeleteProductInteraction(context.Context, *DeleteProductInteractionRequest) (*DeleteProductInteractionResponse, error)
	UpdateProductsCardStyle(context.Context, *UpdateProductsCardStyleRequest) (*UpdateProductsCardStyleResponse, error)
	ApproveShort(context.Context, *ApproveShortRequest) (*ApproveShortResponse, error)
	RejectShort(context.Context, *RejectShortRequest) (*RejectShortResponse, error)
	PublishShort(context.Context, *PublishShortRequest) (*PublishShortResponse, error)
	UnpublishShort(context.Context, *UnpublishShortRequest) (*UnpublishShortResponse, error)
	GenerateShortThumbnail(context.Context, *GenerateShortThumbnailRequest) (*GenerateShortThumbnailResponse, error)
	UploadShortThumbnail(context.Context, *UploadShortThumbnailRequest) (*UploadShortThumbnailResponse, error)
	mustEmbedUnimplementedShortsServiceServer()
}

// UnimplementedShortsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortsServiceServer struct {
}

func (UnimplementedShortsServiceServer) CreateShort(context.Context, *CreateShortRequest) (*CreateShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShort not implemented")
}
func (UnimplementedShortsServiceServer) DeleteShort(context.Context, *DeleteShortRequest) (*DeleteShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShort not implemented")
}
func (UnimplementedShortsServiceServer) UploadVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedShortsServiceServer) DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedShortsServiceServer) UpdateVideoConfig(context.Context, *UpdateVideoConfigRequest) (*UpdateVideoConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoConfig not implemented")
}
func (UnimplementedShortsServiceServer) CombineVideos(context.Context, *CombineVideosRequest) (*CombineVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CombineVideos not implemented")
}
func (UnimplementedShortsServiceServer) UpdateShort(context.Context, *UpdateShortRequest) (*UpdateShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShort not implemented")
}
func (UnimplementedShortsServiceServer) GetShort(context.Context, *GetShortRequest) (*GetShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShort not implemented")
}
func (UnimplementedShortsServiceServer) ListShorts(context.Context, *ListShortsRequest) (*ListShortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShorts not implemented")
}
func (UnimplementedShortsServiceServer) UpdateShortInteractions(context.Context, *UpdateShortInteractionsRequest) (*UpdateShortInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShortInteractions not implemented")
}
func (UnimplementedShortsServiceServer) AddHotspotInteraction(context.Context, *CreateHotspotInteractionRequest) (*CreateHotspotInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotspotInteraction not implemented")
}
func (UnimplementedShortsServiceServer) UpdateHotspotInteraction(context.Context, *UpdateHotspotInteractionRequest) (*UpdateHotspotInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotspotInteraction not implemented")
}
func (UnimplementedShortsServiceServer) DeleteHotspotInteraction(context.Context, *DeleteHotspotInteractionRequest) (*DeleteHotspotInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotspotInteraction not implemented")
}
func (UnimplementedShortsServiceServer) AddTextInteraction(context.Context, *CreateTextInteractionRequest) (*CreateTextInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTextInteraction not implemented")
}
func (UnimplementedShortsServiceServer) UpdateTextInteraction(context.Context, *UpdateTextInteractionRequest) (*UpdateTextInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextInteraction not implemented")
}
func (UnimplementedShortsServiceServer) DeleteTextInteraction(context.Context, *DeleteTextInteractionRequest) (*DeleteTextInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTextInteraction not implemented")
}
func (UnimplementedShortsServiceServer) AddButtonInteraction(context.Context, *CreateButtonInteractionRequest) (*CreateButtonInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddButtonInteraction not implemented")
}
func (UnimplementedShortsServiceServer) UpdateButtonInteraction(context.Context, *UpdateButtonInteractionRequest) (*UpdateButtonInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateButtonInteraction not implemented")
}
func (UnimplementedShortsServiceServer) DeleteButtonInteraction(context.Context, *DeleteButtonInteractionRequest) (*DeleteButtonInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteButtonInteraction not implemented")
}
func (UnimplementedShortsServiceServer) AddProductInteraction(context.Context, *CreateProductInteractionRequest) (*CreateProductInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductInteraction not implemented")
}
func (UnimplementedShortsServiceServer) UpdateProductInteraction(context.Context, *UpdateProductInteractionRequest) (*UpdateProductInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductInteraction not implemented")
}
func (UnimplementedShortsServiceServer) DeleteProductInteraction(context.Context, *DeleteProductInteractionRequest) (*DeleteProductInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductInteraction not implemented")
}
func (UnimplementedShortsServiceServer) UpdateProductsCardStyle(context.Context, *UpdateProductsCardStyleRequest) (*UpdateProductsCardStyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductsCardStyle not implemented")
}
func (UnimplementedShortsServiceServer) ApproveShort(context.Context, *ApproveShortRequest) (*ApproveShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveShort not implemented")
}
func (UnimplementedShortsServiceServer) RejectShort(context.Context, *RejectShortRequest) (*RejectShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectShort not implemented")
}
func (UnimplementedShortsServiceServer) PublishShort(context.Context, *PublishShortRequest) (*PublishShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishShort not implemented")
}
func (UnimplementedShortsServiceServer) UnpublishShort(context.Context, *UnpublishShortRequest) (*UnpublishShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishShort not implemented")
}
func (UnimplementedShortsServiceServer) GenerateShortThumbnail(context.Context, *GenerateShortThumbnailRequest) (*GenerateShortThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortThumbnail not implemented")
}
func (UnimplementedShortsServiceServer) UploadShortThumbnail(context.Context, *UploadShortThumbnailRequest) (*UploadShortThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadShortThumbnail not implemented")
}
func (UnimplementedShortsServiceServer) mustEmbedUnimplementedShortsServiceServer() {}

// UnsafeShortsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortsServiceServer will
// result in compilation errors.
type UnsafeShortsServiceServer interface {
	mustEmbedUnimplementedShortsServiceServer()
}

func RegisterShortsServiceServer(s grpc.ServiceRegistrar, srv ShortsServiceServer) {
	s.RegisterService(&ShortsService_ServiceDesc, srv)
}

func _ShortsService_CreateShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).CreateShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/CreateShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).CreateShort(ctx, req.(*CreateShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_DeleteShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).DeleteShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/DeleteShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).DeleteShort(ctx, req.(*DeleteShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UploadVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UploadVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UploadVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UploadVideo(ctx, req.(*UploadVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/DeleteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).DeleteVideo(ctx, req.(*DeleteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UpdateVideoConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UpdateVideoConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UpdateVideoConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UpdateVideoConfig(ctx, req.(*UpdateVideoConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_CombineVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombineVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).CombineVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/CombineVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).CombineVideos(ctx, req.(*CombineVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UpdateShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UpdateShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UpdateShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UpdateShort(ctx, req.(*UpdateShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_GetShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).GetShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/GetShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).GetShort(ctx, req.(*GetShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_ListShorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).ListShorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/ListShorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).ListShorts(ctx, req.(*ListShortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UpdateShortInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShortInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UpdateShortInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UpdateShortInteractions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UpdateShortInteractions(ctx, req.(*UpdateShortInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_AddHotspotInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotspotInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).AddHotspotInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/AddHotspotInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).AddHotspotInteraction(ctx, req.(*CreateHotspotInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UpdateHotspotInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotspotInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UpdateHotspotInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UpdateHotspotInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UpdateHotspotInteraction(ctx, req.(*UpdateHotspotInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_DeleteHotspotInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotspotInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).DeleteHotspotInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/DeleteHotspotInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).DeleteHotspotInteraction(ctx, req.(*DeleteHotspotInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_AddTextInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).AddTextInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/AddTextInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).AddTextInteraction(ctx, req.(*CreateTextInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UpdateTextInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UpdateTextInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UpdateTextInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UpdateTextInteraction(ctx, req.(*UpdateTextInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_DeleteTextInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTextInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).DeleteTextInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/DeleteTextInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).DeleteTextInteraction(ctx, req.(*DeleteTextInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_AddButtonInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateButtonInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).AddButtonInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/AddButtonInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).AddButtonInteraction(ctx, req.(*CreateButtonInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UpdateButtonInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateButtonInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UpdateButtonInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UpdateButtonInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UpdateButtonInteraction(ctx, req.(*UpdateButtonInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_DeleteButtonInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteButtonInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).DeleteButtonInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/DeleteButtonInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).DeleteButtonInteraction(ctx, req.(*DeleteButtonInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_AddProductInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).AddProductInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/AddProductInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).AddProductInteraction(ctx, req.(*CreateProductInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UpdateProductInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UpdateProductInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UpdateProductInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UpdateProductInteraction(ctx, req.(*UpdateProductInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_DeleteProductInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).DeleteProductInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/DeleteProductInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).DeleteProductInteraction(ctx, req.(*DeleteProductInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UpdateProductsCardStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductsCardStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UpdateProductsCardStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UpdateProductsCardStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UpdateProductsCardStyle(ctx, req.(*UpdateProductsCardStyleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_ApproveShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).ApproveShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/ApproveShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).ApproveShort(ctx, req.(*ApproveShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_RejectShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).RejectShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/RejectShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).RejectShort(ctx, req.(*RejectShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_PublishShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).PublishShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/PublishShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).PublishShort(ctx, req.(*PublishShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UnpublishShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UnpublishShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UnpublishShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UnpublishShort(ctx, req.(*UnpublishShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_GenerateShortThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).GenerateShortThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/GenerateShortThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).GenerateShortThumbnail(ctx, req.(*GenerateShortThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortsService_UploadShortThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadShortThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortsServiceServer).UploadShortThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorts.ShortsService/UploadShortThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortsServiceServer).UploadShortThumbnail(ctx, req.(*UploadShortThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortsService_ServiceDesc is the grpc.ServiceDesc for ShortsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorts.ShortsService",
	HandlerType: (*ShortsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShort",
			Handler:    _ShortsService_CreateShort_Handler,
		},
		{
			MethodName: "DeleteShort",
			Handler:    _ShortsService_DeleteShort_Handler,
		},
		{
			MethodName: "UploadVideo",
			Handler:    _ShortsService_UploadVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _ShortsService_DeleteVideo_Handler,
		},
		{
			MethodName: "UpdateVideoConfig",
			Handler:    _ShortsService_UpdateVideoConfig_Handler,
		},
		{
			MethodName: "CombineVideos",
			Handler:    _ShortsService_CombineVideos_Handler,
		},
		{
			MethodName: "UpdateShort",
			Handler:    _ShortsService_UpdateShort_Handler,
		},
		{
			MethodName: "GetShort",
			Handler:    _ShortsService_GetShort_Handler,
		},
		{
			MethodName: "ListShorts",
			Handler:    _ShortsService_ListShorts_Handler,
		},
		{
			MethodName: "UpdateShortInteractions",
			Handler:    _ShortsService_UpdateShortInteractions_Handler,
		},
		{
			MethodName: "AddHotspotInteraction",
			Handler:    _ShortsService_AddHotspotInteraction_Handler,
		},
		{
			MethodName: "UpdateHotspotInteraction",
			Handler:    _ShortsService_UpdateHotspotInteraction_Handler,
		},
		{
			MethodName: "DeleteHotspotInteraction",
			Handler:    _ShortsService_DeleteHotspotInteraction_Handler,
		},
		{
			MethodName: "AddTextInteraction",
			Handler:    _ShortsService_AddTextInteraction_Handler,
		},
		{
			MethodName: "UpdateTextInteraction",
			Handler:    _ShortsService_UpdateTextInteraction_Handler,
		},
		{
			MethodName: "DeleteTextInteraction",
			Handler:    _ShortsService_DeleteTextInteraction_Handler,
		},
		{
			MethodName: "AddButtonInteraction",
			Handler:    _ShortsService_AddButtonInteraction_Handler,
		},
		{
			MethodName: "UpdateButtonInteraction",
			Handler:    _ShortsService_UpdateButtonInteraction_Handler,
		},
		{
			MethodName: "DeleteButtonInteraction",
			Handler:    _ShortsService_DeleteButtonInteraction_Handler,
		},
		{
			MethodName: "AddProductInteraction",
			Handler:    _ShortsService_AddProductInteraction_Handler,
		},
		{
			MethodName: "UpdateProductInteraction",
			Handler:    _ShortsService_UpdateProductInteraction_Handler,
		},
		{
			MethodName: "DeleteProductInteraction",
			Handler:    _ShortsService_DeleteProductInteraction_Handler,
		},
		{
			MethodName: "UpdateProductsCardStyle",
			Handler:    _ShortsService_UpdateProductsCardStyle_Handler,
		},
		{
			MethodName: "ApproveShort",
			Handler:    _ShortsService_ApproveShort_Handler,
		},
		{
			MethodName: "RejectShort",
			Handler:    _ShortsService_RejectShort_Handler,
		},
		{
			MethodName: "PublishShort",
			Handler:    _ShortsService_PublishShort_Handler,
		},
		{
			MethodName: "UnpublishShort",
			Handler:    _ShortsService_UnpublishShort_Handler,
		},
		{
			MethodName: "GenerateShortThumbnail",
			Handler:    _ShortsService_GenerateShortThumbnail_Handler,
		},
		{
			MethodName: "UploadShortThumbnail",
			Handler:    _ShortsService_UploadShortThumbnail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allprotos/shorts.proto",
}
